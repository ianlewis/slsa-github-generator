name: SLSA Node.js builder

permissions: {}

on:
  workflow_call:
    inputs:
      directory:
        description: "Sub-directory where package.json is located. Must be under the workspace."
        required: false
        type: string
        default: "."

      node-version:
        description: "Version Spec of the version to use. Examples: 12.x, 10.15.1, >=10.15.0."
        required: false
        type: string

      node-version-file:
        description: "File containing the version Spec of the version to use.  Examples: .nvmrc, .node-version, .tool-versions."
        required: false
        type: string

      run-scripts:
        description: "An ordered list of scripts from the package.json file to run (comma separated). Example value: 'script1, script2'"
        required: false
        type: string

      # NOTE: the additional inputs below are to support additional
      # functionality of the workflow.
      rekor-log-public:
        description: "Allow publication of your repository name on the public Rekor log"
        required: false
        type: boolean
        default: false

    secrets:
      node-auth-token:
        description: "The npm registry auth token used to publish the package."
        required: true

jobs:
  slsa-setup:
    permissions:
      id-token: write # For token creation.
    outputs:
      slsa-token: ${{ steps.generate.outputs.slsa-token }}
    runs-on: ubuntu-latest
    steps:
      - name: Generate the token
        id: generate
        uses: slsa-framework/slsa-github-generator/actions/delegator/setup-token@main
        with:
          slsa-workflow-recipient: "delegator_generic_slsa3.yml"
          slsa-rekor-log-public: ${{ inputs.rekor-log-public }}
          slsa-runner-label: "ubuntu-latest"
          slsa-build-action-path: "./internal/nodejs-action"
          slsa-version: "v0.2"
          # TODO(#1575): mask sensitive fields.
          slsa-workflow-inputs: ${{ toJson(inputs) }}

  slsa-run:
    needs: [slsa-setup]
    permissions:
      id-token: write # For signing.
      contents: write # For asset uploads.
      packages: write # For publishing to GitHub packages.
    uses: slsa-framework/slsa-github-generator/.github/workflows/delegator_generic_slsa3.yml@main
    with:
      slsa-token: ${{ needs.slsa-setup.outputs.slsa-token }}

  # This detects the repository and ref of the reusable workflow.
  # For pull request, this gets the referenced slsa-github-generator workflow.
  detect-env:
    outputs:
      repository: ${{ steps.detect.outputs.repository }}
      ref: ${{ steps.detect.outputs.ref }}
      workflow: ${{ steps.detect.outputs.workflow }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Needed to detect the current reusable repository and ref.
    steps:
      - name: Detect the builder ref
        id: detect
        uses: slsa-framework/slsa-github-generator/.github/actions/detect-workflow-js@main

  # TODO(#1847): Use cleanup/finalize hook.
  slsa-publish:
    needs: [detect-env, slsa-run]
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write # For asset uploads. Optional
    runs-on: ubuntu-latest
    steps:
      - name: Checkout builder repository
        uses: slsa-framework/slsa-github-generator/.github/actions/secure-builder-checkout@main
        with:
          repository: "${{ needs.detect-env.outputs.repository }}"
          ref: "${{ needs.detect-env.outputs.ref }}"
          path: __BUILDER_CHECKOUT_DIR__

      - name: Checkout the Node repository
        uses: ./__BUILDER_CHECKOUT_DIR__/.github/actions/secure-project-checkout-node
        with:
          path: __PROJECT_CHECKOUT_DIR__
          node-version: ${{ inputs.node-version }}
          node-version-file: ${{ inputs.node-version-file }}
          registry-url: ${{ inputs.registry-url }}

      # NOTE: The attestation name has a rng value in it's name so we don't need to check for file collisions.
      - name: Download attestations
        id: attestation-download
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: ${{ needs.slsa-run.outputs.attestations-download-name }}

      # TODO(#1680): verify the attestation before upload.
      # - name: Download artifact
      #   uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
      #   with:
      #     name: "package.tgz"
      #
      # - name: Verify attestations
      #   env:
      #     SLSA_ATTESTATION_DOWNLOAD_NAME: ${{ needs.slsa-run.outputs.attestations-download-name }}
      #   run: |
      #     echo "download from $SLSA_ATTESTATION_DOWNLOAD_NAME"

      # TODO(#888): Publish to GitHub release.

      # TODO(#1669): Publish to npm. Note that we need to upload our own bundle to npm.
      # TODO(#1669): Use mainline version of npm
      - name: Clone npm fork
        id: clone-fork
        run: |
          set -euo pipefail

          # Clone npm fork.
          cd "$(dirname "$(which node)")"
          mkdir -p node_modules
          cd node_modules
          git clone https://github.com/ianlewis/cli.git npm

          # checkout branch
          cd npm
          git checkout oob-provenance

          # Install dependencies
          ./bin/npm ci

      # TODO(#1669): Use mainline version of npm
      # TODO(#1669): Generalize directory path checking. The same logic is needed in internal action.
      - name: Publish the package
        id: publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.node-auth-token }}
          ATTESTATION_DIR: ${{ steps.attestation-download.outputs.download-path }}
          UNTRUSTED_DIRECTORY: ${{ inputs.directory }}
        run: |
          set -euo pipefail

          # Get absolute path to the attestation sigstore bundle since it's
          # outside the project checkout dir.
          # NOTE: The attestation file name is specified in the internal/nodejs-action
          attestation_abs_path="$(realpath -e "${ATTESTATION_DIR}/attestation.intoto.sigstore")"

          # Move to the project checkout dir.
          cd __PROJECT_CHECKOUT_DIR__

          untrusted_realpath="$(realpath -e "${UNTRUSTED_DIRECTORY}")"
          echo "Directory '${UNTRUSTED_DIRECTORY}' resolved to '${untrusted_realpath}'"

          github_workspace_realpath=$(realpath -e "${GITHUB_WORKSPACE}")
          echo "GitHub workspace '${GITHUB_WORKSPACE}' resolved to '${github_workspace_realpath}'"

          echo "Checking directory '${untrusted_realpath}' is a sub-directory of '${github_workspace_realpath}'"
          if [[ "${untrusted_realpath}" != "${github_workspace_realpath}" ]] && [[ ${untrusted_realpath} != ${github_workspace_realpath}/* ]]; then
              echo "${UNTRUSTED_DIRECTORY} not a sub-directory of ${GITHUB_WORKSPACE}"
              exit 1
          fi
          # Directory was validated. Explicitly trust it.
          directory="${UNTRUSTED_DIRECTORY}"

          cd "${directory}"

          # Run npm publish using npm fork.
          "$(dirname "$(which node)")"/node_modules/npm/bin/npm publish --provenance "${attestation_abs_path}"
